import React from 'react';
import clsx from 'clsx';
import Layout from '@theme/Layout';
import DocSidebar from '@theme/DocSidebar';
import { ThemeClassNames } from '@docusaurus/theme-common';
import styles from './styles.module.css';
import items from './sidebar.cjs'; // generated by storybook plugin
import { PropSidebarItem } from '@docusaurus/plugin-content-docs';
import {useLocation} from '@docusaurus/router';

function useQuery() {
  const { search } = useLocation();

  return React.useMemo(() => new URLSearchParams(search), [search]);
}

function observe( iframe ) {
  const body = iframe.contentDocument.body;

  const observerCallback: ResizeObserverCallback = (entries: ResizeObserverEntry[]) => {
    window.requestAnimationFrame((): void | undefined => {
      if (!Array.isArray(entries) || !entries.length) {
        return;
      }
      iframe.style.height = `${body.scrollHeight}px`;
    });
  };
  const resizeObserver = new ResizeObserver(observerCallback);
  resizeObserver.observe(body);
}

export default function Storybook() {
  let query = useQuery();
  const id = query.get('id');

  const storybookItems: PropSidebarItem[] = items.map((item) => ({
    type: 'link',
    href: `/storybook?id=${item.id}`,
    label: item.label
  }));

  return (
    <Layout title="Storybook">
      <div className={clsx(styles.storybookRoot)}>
        <aside className={clsx(
          ThemeClassNames.docs.docSidebarContainer,
          styles.docSidebarContainer
        )}>
          <DocSidebar isHidden={false} onCollapse={() => {}} sidebar={storybookItems} path="/storybook">
          </DocSidebar>
        </aside>
        <iframe onLoad={e => observe(e.target)} src={`/storybook-iframe?id=${id}`} style={{ width: '100%', height: '100%'}}/>
      </div>
    </Layout>
  );
}
